#!/usr/bin/env python

from optparse import OptionParser
from fnmatch import fnmatch
import os, sys, urllib, re

EXTMAP = {'*.jsp': 'jsp', '*.pxi': 'cython', '*.dpatch': 'dpatch', '*.bat': 'bat', '*.mao': 'mako', '*.pxd': 'cython', '*.mak': 'make', '*.haml': 'haml', '*.objdump': 'objdump', '*.pas': 'delphi', '*.el': 'common-lisp', '*.tpl': 'smarty', '*.ooc': 'ooc', '*.mll': 'ocaml', '*.d-objdump': 'd-objdump', '*.properties': 'ini', '*.txt': 'text', '*.aspx': 'aspx-vb', '.vimrc': 'vim', '*.plot': 'gnuplot', '*.vert': 'glsl', '*.flxh': 'felix', '*.pytb': 'pytb', '*.myt': 'myghty', '*.ll': 'llvm', '*.lgt': 'logtalk', '*.ashx': 'aspx-vb', '*.sc': 'python', '*.ns2': 'newspeak', '*.geo': 'glsl', '*.php': 'php', '*.di': 'd', '*.c++-objdump': 'cpp-objdump', '*.man': 'groff', '*.erl-sh': 'erl', '*.cpp-objdump': 'cpp-objdump', '*.rest': 'rst', '*.[1234567]': 'groff', '*.css': 'css', '*.feature': 'Cucumber', '*.py3tb': 'py3tb', '*.rss': 'xml', '*.sass': 'sass', '*.applescript': 'applescript', '*.pot': 'pot', '*.pov': 'pov', '*.moo': 'moocode', '*.ini': 'ini', '*.mod': 'modula2', 'Makefile': 'make', '*.lua': 'lua', '*.befunge': 'befunge', '*.rst': 'rst', '*.java': 'java', '*.ascx': 'aspx-vb', '*.html': 'html', '*.c-objdump': 'c-objdump', 'apache.conf': 'apacheconf', '*.wsdl': 'xml', 'GNUmakefile': 'make', '*.cpp': 'cpp', '*.asax': 'aspx-vb', '*.phtml': 'html+php', '*.csh': 'tcsh', 'apache2.conf': 'apacheconf', '*.rake': 'rb', '*.cfml': 'cfm', '*.evoque': 'evoque', '*.pro': 'prolog', '*.cxx': 'cpp', '*.asm': 'nasm', '*.h++': 'cpp', '*.ASM': 'nasm', '*.mxml': 'mxml', 'Rakefile': 'rb', 'control': 'control', '*.pyx': 'cython', '*.flx': 'felix', '*.pyw': 'python', '*.htm': 'html', '*.patch': 'diff', '*.rbw': 'rb', '*.tac': 'python', '*.mu': 'mupad', '*.rbx': 'rb', '*.ebuild': 'bash', '*.xhtml': 'html', '*.vb': 'vb.net', '*.scala': 'scala', '*.md': 'minid', '*.cfc': 'cfm', '*.mo': 'modelica', '*.ml': 'ocaml', '*.s': 'gas', '*.r': 'rebol', '*.as': 'as3', '*.tex': 'tex', '*.kid': 'genshi', '*.erl': 'erlang', '*.c': 'c', '*.b': 'brainfuck', '*.g': 'antlr-ruby', '*.f': 'fortran', '*.scm': 'scheme', '*.d': 'd', 'SConstruct': 'python', '*.j': 'objective-j', '*.spt': 'cheetah', '*.h': 'c', '*.m': 'objective-c', '*.S': 'gas', '*.R': 'splus', '*.hh': 'cpp', '*.php[345]': 'php', '*.def': 'modula2', '*.coffee': 'coffee-script', '*.diff': 'diff', 'makefile': 'make', '*.mli': 'ocaml', '*.js': 'js', '*.bas': 'vb.net', '*.G': 'antlr-ruby', '*.plt': 'gnuplot', '*.inc': 'pov', '*.hx': 'hx', '*.hs': 'haskell', '*.io': 'io', '*.sh-session': 'console', 'SConscript': 'python', '*.yml': 'yaml', '*.bash': 'bash', '*.cmake': 'cmake', '*.tmpl': 'cheetah', '*.pm': 'perl', '*.xsd': 'xml', '*.ada': 'ada', '*.adb': 'ada', '*.tcl': 'tcl', '*.pl': 'perl', '.htaccess': 'apacheconf', '*.po': 'pot', '*.go': 'go', '*.ads': 'ada', '*.vala': 'vala', '*.tcsh': 'tcsh', '*.asy': 'asy', '*.py': 'python', 'autodelegate': 'myghty', '*.axd': 'aspx-vb', '*.f90': 'fortran', '*.sql': 'sql', '*.cw': 'redcode', '*.cs': 'csharp', '*.toc': 'tex', '*.clj': 'clojure', '*.cl': 'common-lisp', '*.sqlite3-console': 'sqlite3', '*.weechatlog': 'irc', '*.vapi': 'vala', '*.aux': 'tex', 'Makefile.*': 'make', '*.cc': 'cpp', '*.boo': 'boo', '*.sh': 'bash', '*.dylan': 'dylan', '*.cxx-objdump': 'cpp-objdump', '*.hrl': 'erlang', '*.rhtml': 'rhtml', '*.r3': 'rebol', '*.st': 'smalltalk', '*.cfm': 'cfm', '*.abap': 'abap', '*.prolog': 'prolog', '*.lhs': 'lhs', '*.eclass': 'bash', '*.ksh': 'bash', '*.mly': 'ocaml', '*.Rout': 'rconsole', '*.bf': 'brainfuck', '*.c++': 'cpp', '*.vim': 'vim', '*.hpp': 'cpp', '*.rb': 'rb', '*.yaml': 'yaml', 'squid.conf': 'squidconf', '*.gemspec': 'rb', '*.hxx': 'cpp', '*.rl': 'ragel-objc', '*.frag': 'glsl', '*.xslt': 'xml', '*.xml': 'xml', '*.xsl': 'xml', 'sources.list': 'sourceslist', '*.asmx': 'aspx-vb', '*.lisp': 'common-lisp', '*.cfg': 'ini', '*.cmd': 'bat', '*.darcspatch': 'dpatch'}
LEXERS = ['sourceslist', 'sources.list', 'delphi', 'pas', 'pascal', 'objectpascal', 'js+mako', 'javascript+mako', 'brainfuck', 'bf', 'html+cheetah', 'html+spitfire', 'js+django', 'javascript+django', 'js+jinja', 'javascript+jinja', 'html+evoque', 'numpy', 'modula2', 'm2', 'bash', 'sh', 'ksh', 'html+django', 'html+jinja', 'css+php', 'vim', 'css+genshitext', 'css+genshi', 'css+myghty', 'cfm', 'matlabsession', 'smarty', 'xml+evoque', 'hx', 'haXe', 'redcode', 'django', 'jinja', 'apacheconf', 'aconf', 'apache', 'scala', 'lighty', 'lighttpd', 'java', 'js+genshitext', 'js+genshi', 'javascript+genshitext', 'javascript+genshi', 'scheme', 'scm', 'rhtml', 'html+erb', 'html+ruby', 'ragel-java', 'dpatch', 'coffee-script', 'coffeescript', 'ragel-d', 'html+myghty', 'rbcon', 'irb', 'css', 'js+smarty', 'javascript+smarty', 'asy', 'asymptote', 'xml+php', 'css+erb', 'css+ruby', 'fortran', 'gnuplot', 'mysql', 'rebol', 'cpp', 'c++', 'pot', 'po', 'evoque', 'xml+smarty', 'dylan', 'trac-wiki', 'moin', 'matlab', 'octave', 'c', 'html', 'aspx-cs', 'cmake', 'mako', 'irc', 'prolog', 'python', 'py', 'css+django', 'css+jinja', 'smalltalk', 'squeak', 'js+myghty', 'javascript+myghty', 'yaml', 'antlr-as', 'antlr-actionscript', 'xml+mako', 'xslt', 'splus', 's', 'r', 'sqlite3', 'boo', 'ocaml', 'as', 'actionscript', 'vb.net', 'vbnet', 'squidconf', 'squid.conf', 'squid', 'd', 'logtalk', 'erb', 'd-objdump', 'bbcode', 'haml', 'HAML', 'rb', 'ruby', 'py3tb', 'mupad', 'xml+erb', 'xml+ruby', 'control', 'ragel-cpp', 'befunge', 'c-objdump', 'jsp', 'abap', 'js+cheetah', 'javascript+cheetah', 'js+spitfire', 'javascript+spitfire', 'html+mako', 'ragel-ruby', 'ragel-rb', 'diff', 'udiff', 'ragel', 'cfs', 'ada', 'ada95ada2005', 'objdump', 'css+mako', 'Cucumber', 'cucumber', 'Gherkin', 'gherkin', 'html+php', 'make', 'makefile', 'mf', 'bsdmake', 'io', 'vala', 'vapi', 'haskell', 'hs', 'lua', 'pov', 'sass', 'SASS', 'antlr-java', 'antlr-objc', 'js+erb', 'javascript+erb', 'js+ruby', 'javascript+ruby', 'xml', 'basemake', 'antlr-python', 'glsl', 'genshitext', 'python3', 'py3', 'objective-j', 'objectivej', 'obj-j', 'objj', 'gas', 'bat', 'pycon', 'antlr', 'xml+cheetah', 'xml+spitfire', 'go', 'minid', 'cython', 'pyx', 'ragel-c', 'erlang', 'erl', 'aspx-vb', 'felix', 'flx', 'groff', 'nroff', 'man', 'clojure', 'clj', 'modelica', 'antlr-perl', 'genshi', 'kid', 'xml+genshi', 'xml+kid', 'myghty', 'html+genshi', 'html+kid', 'tcl', 'perl', 'pl', 'rst', 'rest', 'restructuredtext', 'ini', 'cfg', 'moocode', 'newspeak', 'console', 'cpp-objdump', 'c++-objdumb', 'cxx-objdump', 'raw', 'tcsh', 'csh', 'csharp', 'c#', 'rconsole', 'rout', 'tex', 'latex', 'css+smarty', 'text', 'antlr-csharp', 'antlr-c#', 'cheetah', 'spitfire', 'llvm', 'nginx', 'applescript', 'html+smarty', 'objective-c', 'objectivec', 'obj-c', 'objc', 'js', 'javascript', 'common-lisp', 'cl', 'ragel-em', 'as3', 'actionscript3', 'lhs', 'literate-haskell', 'pytb', 'php', 'php3', 'php4', 'php5', 'antlr-cpp', 'js+php', 'javascript+php', 'ooc', 'sql', 'ragel-objc', 'xml+django', 'xml+jinja', 'mxml', 'nasm', 'antlr-ruby', 'antlr-rb', 'xml+myghty']
LEXERMAP = {'emacs-lisp': 'common-lisp',
            'scheme': 'common-lisp',
            'nxml': 'xml',
            'c++': 'cpp'}

URI = 'https://paste.in.ua/'
mode_re = re.compile('-\*-.*mode: (?P<mode>[\w\.\-]+).*-\*-', re.I)

def findlexer(fn, default=None):
    fn = os.path.basename(fn)
    for pat, lexer in EXTMAP.items():
        if fnmatch(fn, pat):
            return lexer
    return default

def guess_lexer(data, default):
    lines = data.splitlines()
    # shebang
    try:
        line = lines[0]
    except IndexError:
        print 'abort: no data'
        sys.exit(1)
    if line.startswith('#!'):
        executable = os.path.basename(line.split()[0][2:])
        if executable == 'env':
            return line.split()[1]
        return executable

    # file variables appear only in first two lines of file
    for line in lines[:2]:
        if mode_re.search(line):
            mode = mode_re.search(line).group('mode')
            return LEXERMAP.get(mode, mode)

    # check if it's a diff
    probably = False
    for line in lines:
        if line.startswith('--- '):
            probably = True
        elif line.startswith('+++ ') and probably:
            return 'diff'
        else:
            probably = False
    return default

def print_lexers(*args, **kwargs):
    print '\n'.join(sorted(LEXERS))
    sys.exit()

def paste(data, lexer):
    post = {'data': data, 'lexer': lexer}
    return urllib.urlopen(URI, urllib.urlencode(post)).url

def result(url):
    print url
    utils = 'xclip pbcopy'.split()
    for util in utils:
        # not because 0 is success
        if not os.system('which %s > /dev/null 2>&1' % util):
            os.system('printf %s | %s' % (url, util))
            print 'url copied to clipboard using %s' % util

def main():
    usage = 'usage: cat file | %prog  or  %prog file'
    parser = OptionParser(usage)
    parser.add_option('-t', '--type', type='string', default='',
                      help='input file type')
    parser.add_option('', '--types', action='callback', callback=print_lexers,
                      help='print available file types')
    opts, args = parser.parse_args()

    if not len(args):
        # is not a tty - we have data in stdin awaiting
        if not sys.stdin.isatty():
            data = sys.stdin.read()
        else:
            sys.exit(parser.print_help())
        lexer = opts.type
    else:
        data = file(args[0]).read()
        lexer = opts.type or findlexer(args[0])
    lexer = lexer or guess_lexer(data, 'text')

    if lexer not in LEXERS:
        print 'abort: %s is not a valid file type' % lexer
        sys.exit(1)

    result(paste(data, lexer))

if __name__ == '__main__':
    main()
